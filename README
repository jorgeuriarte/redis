Partial slaves support in Redis (experimental fork)
---------------------------------------------------

Executive review :P
-------------------

I need slaves to be able to discard big-parts of its master keyspace in order to save memory, in
the cases where I'm *sure* there's no need for that specific slave to hold that information.

The setup
---------

We've been successfully using redis' master-slave scheme during some time now.
Our content comes mainly from one or two central sources, that write directly to the redis master.
The data is then massively consumed from a network of redis slaves sharing box with our front applications, in a read-ony system (except for some temporal operations, intersections and so...)

The distribution of our data has a core keyspace with every non-localized information of the system.
Those items are bound to be consumed from almost any of the sites. But there's also a BIG PART of our keyspace designed to hold i18n'ed information (names, descriptions, summaries...), in more than 30 languages (and counting...)

There's a high degree of locality between some of the fronts/domains accessed, and the different i18n versions of the data, so the spanish site will only access to the "es_ES:*"" keyspace to get texts, the italian site will only require info from the "it_IT:*"" keyspace, and so on.

Memory
------

Lately, we've been realizing that as core-keyspace grows bigger, the part of any given slave's keyspace that will *never* be required from it's application is also growing. As traffic gets bigger, we tend to specializy machines (and its attached redis slave) to a single domain, and so it makes no sense to hold all that information in our slaves.

In terms of memory, it seems that our fronts' slaves need only around 20% of the master size, so if our master grows up to 20Gb, it seems that we have a waste of almost 16Gb in memory in our slaves (easily translated to money)

So I started playing with the idea of a special configuration in slaves to enable them partial replication of a subset of the master keyspace.

Usage:

The usage should be as simple as allowing any slave to describe in its config the glob expressions of the keyspaces that it's not supposed to replicate.

In redis.conf:

  slave-partial-namespace-discard es_ES:* es_MX:*
  slave-partial-namespace-discard en_GB:* *:masteronly:*

With this configuration, any key fitting those glob expressions will be automatically DISCARDED in the slaves during
the sincronization.

Disclaimer:

This patch is only a proof of concept. It's been easy to hack, there's almost no core code involved, and its performance and structural impact is apparently low, but I fear I might be missing important points.
Is there any severe flaw in my approach? Ideas? Criticisms?
Any insight on why this is/isn't a good/awful idea and/or implementation would be appreciated.

Thank you. Now, the usual Redis' README stuff follows, enjoy it!
Where to find complete Redis documentation?
-------------------------------------------

This README is just a fast "quick start" document. You can find more detailed
documentation at http://redis.io

Building Redis
--------------

Redis can be compiled and used on Linux, OSX, OpenBSD, NetBSD, FreeBSD.
We support big endian and little endian architectures.

It may compile on Solaris derived systems (for instance SmartOS) but our
support for this platform is "best effort" and Redis is not guaranteed to
work as well as in Linux, OSX, and *BSD there.

It is as simple as:

    % make

You can run a 32 bit Redis binary using:

    % make 32bit

After building Redis is a good idea to test it, using:

    % make test

Fixing problems building 32 bit binaries
---------

If after building Redis with a 32 bit target you need to rebuild it
with a 64 bit target, or the other way around, you need to perform a
"make distclean" in the root directory of the Redis distribution.

In case of build errors when trying to build a 32 bit binary of Redis, try
the following steps:

* Install the packages libc6-dev-i386 (also try g++-multilib).
* Try using the following command line instead of "make 32bit":

    make CFLAGS="-m32 -march=native" LDFLAGS="-m32"

Allocator
---------

Selecting a non-default memory allocator when building Redis is done by setting
the `MALLOC` environment variable. Redis is compiled and linked against libc
malloc by default, with the exception of jemalloc being the default on Linux
systems. This default was picked because jemalloc has proven to have fewer
fragmentation problems than libc malloc.

To force compiling against libc malloc, use:

    % make MALLOC=libc

To compile against jemalloc on Mac OS X systems, use:

    % make MALLOC=jemalloc

Verbose build
-------------

Redis will build with a user friendly colorized output by default.
If you want to see a more verbose output use the following:

    % make V=1

Running Redis
-------------

To run Redis with the default configuration just type:

    % cd src
    % ./redis-server
    
If you want to provide your redis.conf, you have to run it using an additional
parameter (the path of the configuration file):

    % cd src
    % ./redis-server /path/to/redis.conf

It is possible to alter the Redis configuration passing parameters directly
as options using the command line. Examples:

    % ./redis-server --port 9999 --slaveof 127.0.0.1 6379
    % ./redis-server /etc/redis/6379.conf --loglevel debug

All the options in redis.conf are also supported as options using the command
line, with exactly the same name.

Playing with Redis
------------------

You can use redis-cli to play with Redis. Start a redis-server instance,
then in another terminal try the following:

    % cd src
    % ./redis-cli
    redis> ping
    PONG
    redis> set foo bar
    OK
    redis> get foo
    "bar"
    redis> incr mycounter
    (integer) 1
    redis> incr mycounter
    (integer) 2
    redis> 

You can find the list of all the available commands here:

    http://redis.io/commands

Installing Redis
-----------------

In order to install Redis binaries into /usr/local/bin just use:

    % make install

You can use "make PREFIX=/some/other/directory install" if you wish to use a
different destination.

Make install will just install binaries in your system, but will not configure
init scripts and configuration files in the appropriate place. This is not
needed if you want just to play a bit with Redis, but if you are installing
it the proper way for a production system, we have a script doing this
for Ubuntu and Debian systems:

    % cd utils
    % ./install_server

The script will ask you a few questions and will setup everything you need
to run Redis properly as a background daemon that will start again on
system reboots.

You'll be able to stop and start Redis using the script named
/etc/init.d/redis_<portnumber>, for instance /etc/init.d/redis_6379.

Code contributions
---

Note: by contributing code to the Redis project in any form, including sending
a pull request via Github, a code fragment or patch via private email or
public discussion groups, you agree to release your code under the terms
of the BSD license that you can find in the COPYING file included in the Redis
source distribution.

Please see the CONTRIBUTING file in this source distribution for more
information.

Enjoy!
